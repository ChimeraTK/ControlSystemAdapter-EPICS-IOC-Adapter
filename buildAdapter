#!/bin/bash -e

ADAPTER_SOURCE="$1"
CSA_PREFIX="$2"
EPICS_BASE="$3"
PROJECT_BINARY_DIR="`pwd`"

echo "ADAPTER_SOURCE=${ADAPTER_SOURCE}"
echo "CSA_PREFIX=${CSA_PREFIX}"
echo "EPICS_BASE=${EPICS_BASE}"
echo "PROJECT_BINARY_DIR=${PROJECT_BINARY_DIR}"

# Determine architecture of the build
EPICS_ARCH=`grep "^ARCH=" "${EPICS_BASE}/lib/pkgconfig/epics-base.pc" | sed -e 's/^ARCH=//'`

# Function links file, generating subfolder if necessary
makeLink() {
   mkdir -p `dirname "${PROJECT_BINARY_DIR}/adapter/$1"`
   ln -sfn "${ADAPTER_SOURCE}/$1" "${PROJECT_BINARY_DIR}/adapter/$1"
}

export -f makeLink
export PROJECT_BINARY_DIR
export ADAPTER_SOURCE

export PATH=${CSA_PREFIX}/bin:${PATH}

# "find" generates a list of paths to any regular file below the source directory
# and calls the makeLink function for every entry.
# NOTE:Semikolon needs to be escaped
if [ ! -f "${PROJECT_BINARY_DIR}/AdapterSourceLinked" ]; then
  cd "${ADAPTER_SOURCE}/"
  echo "Symlinking adapter source from ${ADAPTER_SOURCE}/ to ${PROJECT_BINARY_DIR}/adapter ..."
  find -type f -exec bash -c "makeLink {}" \;
  touch "${PROJECT_BINARY_DIR}/AdapterSourceLinked"
fi

# Link script-generated RELEASE and CONFIG files to configure directory
ln -sfn "${PROJECT_BINARY_DIR}/adapterRELEASE.local" "${PROJECT_BINARY_DIR}/adapter/configure/RELEASE.local"
ln -sfn "${PROJECT_BINARY_DIR}/adapterCONFIG_SITE.local" "${PROJECT_BINARY_DIR}/adapter/configure/CONFIG_SITE.local"

# Build library
echo "Build adapter libraries..."
cd "${PROJECT_BINARY_DIR}/adapter"
make -j5

# Copy library to project/lib folder
mkdir -p "${PROJECT_BINARY_DIR}/lib"
cp "${PROJECT_BINARY_DIR}/adapter/lib/${EPICS_ARCH}/"*.a "${PROJECT_BINARY_DIR}/lib"
chmod u+w -R "${PROJECT_BINARY_DIR}/lib"
